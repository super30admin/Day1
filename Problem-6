// Time Complexity : O(log(m*n))
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : Keeping track of low and high indexes might pop in mind in interview if doing the problem for the first time


// Imagine 2D matrix as flatten up array. set low as 0 and high as last index of arrat
// we can get row by dividing middle index by length of any row. get col by getting remainder of mid and length of row.
// perform same operation as binary search.


class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:

        low = 0
        high = len(matrix) * len(matrix[0]) - 1
        n = len(matrix[0])

        while low <= high:
            mid = (low + high) // 2
            row = mid // n
            col = mid % n

            if target == matrix[row][col]:
                return True
            elif target < matrix[row][col]:
                high = mid - 1
            else:
                low = mid + 1
        return False
