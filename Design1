#Design HashSet
class MyHashSet:

    def __init__(self):
        self.d = {}

    def add(self, key: int) -> None:
        self.d[key] = 1

    def remove(self, key: int) -> None:
        self.d[key] = 0

    def contains(self, key: int) -> bool:
        return self.d.get(key,0)!=0


#Min Stack
class MinStack:
    def __init__(self):
        self.stack=[]
        self.min_stack = []
    def push(self, val: int) -> None:
        self.stack.append(val)
        if(self.min_stack):
            top_min = self.min_stack[-1] 
            if val<top_min:
                self.min_stack.append(val)
            else:
                self.min_stack.append(top_min)
        else:
            self.min_stack.append(val)
    def pop(self) -> None:
        self.stack.pop()
        self.min_stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]
