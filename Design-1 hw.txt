Design-1
Problem 1:Design HashSet (https://leetcode.com/problems/design-hashset/)

class MyHashSet:

    def __init__(self):
       self.buckets =1000
       self.bucketItems = 1000
       self.storage = [None] * self.buckets

    def getBucket(self, key: int) -> int:
        return key % self.buckets

    def getBucketItem(self, key: int) -> int:
        return key // self.bucketItems

    def add(self, key: int) -> None:
        bucket = self.getBucket(key)
        bucketItem = self.getBucketItem(key)
        if self.storage[bucket] == None :
            if bucket == 0:
                self.storage[bucket]= [None] * (self.bucketItems + 1)
            else:    
                self.storage[bucket] = [None] * self.bucketItems
        self.storage[bucket][bucketItem] = True

    def remove(self, key: int) -> None:
        bucket = self.getBucket(key)
        bucketItem = self.getBucketItem(key)
        if self.storage[bucket] == None:
            return
        self.storage[bucket][bucketItem] = False

    def contains(self, key: int) -> bool:
        bucket = self.getBucket(key)
        bucketItem = self.getBucketItem(key)
        if self.storage[bucket] == None:
            return False
        return self.storage[bucket][bucketItem] == True
                


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)






Problem 2:Design MinStack (https://leetcode.com/problems/min-stack/)

Sol 1:

class MinStack:

    def __init__(self):
        self.stack = []
        self.minStack = []
        self.Min = int(sys.maxsize)
        self.minStack.append(self.Min)

    def push(self, val: int) -> None:
        if val<= self.Min:
            self.Min = val
        self.stack.append(val)
        self.minStack.append(self.Min)

    def pop(self) -> None:
        self.stack.pop()
        self.minStack.pop()
        self.Min = self.minStack[-1]

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.minStack[-1]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()




Sol 2:

class MinStack:

    def __init__(self):
        self.stack=[]
        self.Min= int(sys.maxsize)

    def push(self, val: int) -> None:
        if val<= self.Min:
            self.stack.append(self.Min)
            self.Min = val
        self.stack.append(val)

    def pop(self) -> None:
        if self.stack[-1] == self.Min:
            self.stack.pop()  
            self.Min = self.stack.pop()  
        else:
            self.stack.pop()  

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.Min


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()