// Time Complexity : O(1)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// I have implemented minStack using array.
class MinStack {
    int[] stack = new int[10000];
    int[] minStack= new int[10000];
    int topPtr;
    int minPtr;

    public MinStack() {
        topPtr = -1;
        minPtr = -1; 
        
    }
    
    public void push(int val) {
        //checking if the stack is full or not
        if(topPtr >= 1000)return;
        //pushing the element in the stack
        topPtr += 1;
        stack[topPtr] = val;

        //checking if the minStack has any element in it or not
        if(minPtr >= 0){
            //if stack is not empty we will check

            //if the value in minStack is greater than the val 
            if(minStack[minPtr] > val){
                //if val is smaller we will increment the minPtr and push the val
                minStack[++minPtr] = val;
            }
            else{
                //if val is greater then we will increment the minPtr and put the previous value at the top
                minStack[minPtr + 1] = minStack[minPtr];
                minPtr += 1;
            }
        }
        else{
            //if stack is empty push val
            minStack[++minPtr] = val;
        }
        
    }
    
    public void pop() {
        topPtr -= 1;
        minPtr -= 1;
    }
    
    public int top() {
        return stack[topPtr];
    }
    
    public int getMin() {
        return minStack[minPtr];
        
    }
}