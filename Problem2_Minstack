// Time Complexity : O(1)
// Space Complexity: O(n)
// Used 2 stacks one mainstack and another to maintain min element at the top

class MinStack {

    Stack<Integer> MainStack;
    Stack<Integer> MinStack;
    public MinStack() {
        MainStack= new Stack<>();
        MinStack= new Stack<>();
    }
    
    public void push(int val) {

        if(MinStack.isEmpty() || val<=MinStack.peek())
        {
            MinStack.push(val);
        }

       MainStack.push(val);
    }
    
    public void pop() {

        if(MainStack.peek().equals(MinStack.peek()))
        {
            MinStack.pop();
        }
        
        MainStack.pop();
    }
    
    public int top() {
        return MainStack.peek();
    }
    
    public int getMin() {
        return MinStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
