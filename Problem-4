// Time Complexity : O(1) for the most part
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Create 2 stacks. whenever pop or peek operation is asked,check if the outstack is empty. if its empty transfer all elements all instack to outstack
// remove top element of outstack, which is same operation as FIFO
// if both stacks are empty return True

class MyQueue:

    def __init__(self):
        self.InStack = []
        self.OutStack = []
        
    def push(self, x: int) -> None:
        self.InStack.append(x)


    def pop(self) -> int:
        self.peek()
        return self.OutStack.pop()

    def peek(self) -> int:
        if not self.OutStack:
            while self.InStack:
                self.OutStack.append(self.InStack.pop())
        return self.OutStack[-1]

    def empty(self) -> bool:
        return not self.InStack and not self.OutStack
