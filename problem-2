/* Time complexity:
Push : O(1)
Pop : O(1)
Top : O(1)
GetMin : O(1)

Space complexity:
O(n) */

type MinStack struct {
	els []int
	min []int
}

func Constructor() MinStack {
	return MinStack{
		els: []int{},
		min: []int{},
	}
}

func (this *MinStack) Push(val int) {
	this.els = append(this.els, val)

	if len(this.els) == 1 {
		this.min = []int{val}

		return
	}

	if val <= this.min[len(this.min)-1] {
		this.min = append(this.min, val)
	}
}

func (this *MinStack) Pop() {
	el := this.els[len(this.els)-1]

	if el == this.min[len(this.min)-1] {
		this.min = this.min[:len(this.min)-1]
	}

	this.els = this.els[:len(this.els)-1]
}

func (this *MinStack) Top() int {
	return this.els[len(this.els)-1]
}

func (this *MinStack) GetMin() int {
	return this.min[len(this.min)-1]
}