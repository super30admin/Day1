#time complexity : O(1)
#space complexity : O(1)
class MinStack:

    def __init__(self):
        self.stack = []
        self.minstack = []
        
    def push(self, val: int) -> None:
        self.stack.append(val)
        if self.minstack:
            val = min(self.minstack[-1],val)
        self.minstack.append(val)
        
    def pop(self) -> None:
        self.stack.pop()
        self.minstack.pop()
        
    def top(self):
        return self.stack[-1]
        
    def getMin(self) -> int:
        return self.minstack[-1]
        
# Your MinStack object will be instantiated and called as such:
obj = MinStack()
obj.push(10)
obj.push(20)
obj.push(30)
obj.push(1)
m = obj.getMin()
print(m)
obj.pop()
m1=obj.getMin()
print(m1)

param_4 = obj.getMin()
