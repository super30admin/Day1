// time complexity get, put,remove o(1) - amortized 
// space complexity o(n)
class MyHashSet {

    private int MAX_SIZE= 1000000;
    private List<List<Integer>> buckets;
    private int ARRAY_SIZE = 500;

    public MyHashSet() {
        buckets = new ArrayList<>(ARRAY_SIZE);
        for(int i=0; i< ARRAY_SIZE; i++) {
            buckets.add(null);
        }
    }
    
    public void add(int key) {
        int index = key % ARRAY_SIZE;
        if (buckets.get(index) != null) {
            if (!buckets.get(index).contains(key)) {
                buckets.get(index).add(key);
            }
        } else {
            LinkedList<Integer> list = new LinkedList<>();
            list.add(key);
            buckets.set(index, list);
        }
    }
    
    public void remove(int key) {
        int index = key % ARRAY_SIZE;
        if (buckets.get(index) != null && buckets.get(index).contains(key)) {
            buckets.get(index).remove(buckets.get(index).indexOf(key));
            if (buckets.get(index).isEmpty()) {
                buckets.set(index, null);
            }
        }
    }
    
    public boolean contains(int key) {
        int index = key % ARRAY_SIZE;
        if (buckets.get(index) != null) {
            return buckets.get(index).contains(key);
        }
        return false;
    }
}
