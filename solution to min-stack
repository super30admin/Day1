// Time Complexity : O(1)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// using 2 separate stacks, one to store values and the other to store values every time a new minimum number is pushed. a separate min variable is also used.
// pushing values in the min stack if the value to be pushed is equal or lower than the min value, and when we pop, we pop from the min stack only if the value is equal to the top of min

class MinStack {
    Stack<Integer> s, minStack;
    int min;

    public MinStack() {
        s = new Stack<>();
        minStack = new Stack<>();
        min = Integer.MAX_VALUE;
        minStack.push(min);    
    }
    
    public void push(int val) {
        if(val <= min) {
            minStack.push(val);
            min = val;
        }
        s.push(val);
    }
    
    public void pop() {
        if(s.peek() == min) {
            minStack.pop();
            min = minStack.peek();
        }
        s.pop();
    }
    
    public int top() {
        return s.peek();
    }
    
    public int getMin() {
        return min;
    }
}
