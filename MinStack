// Time Complexity : O(1)
// Space Complexity :
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach : By creating a cache stack and storing the minimum values of the stack inside the cache.If we pop the elements from the stack then we will pop from the elements from cache. 


class MinStack {

    Stack<Integer> stack = new Stack<>();
    Stack<Integer> cache = new Stack<>();

    public MinStack() {
        
    }
    
    public void push(int val) {
        stack.push(val);
        if(cache.isEmpty() || cache.peek() > val) {
            cache.push(val);
        }
        else {
            cache.push(cache.peek());
        }
    }
    
    public void pop() {
        cache.pop();
        stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
       return cache.peek(); 
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
