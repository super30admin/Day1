# -*- coding: utf-8 -*-
"""MinStack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPRcfHL5iO4sQA7apVj6JkERw6NLDxpB
"""

class MinStack:
    min=float('inf')

    def __init__(self, size):
        self.min=float('inf')
        self.stack = [] * size
        self.capacity = size
        self.top = -1

    def push(self, val: int) -> None:
        if self.isFull():
            print('Stack Overflow!! Calling exit()…')
            exit(-1)
        if val<=self.min:
           self.stack.append(self.min)
           self.min = val
        self.top = self.top + 1
        self.stack.append(val)

    def pop(self) -> None:
        if self.isEmpty():
            print('Stack Underflow!! Calling exit()…')
            exit(-1)
        t = self.stack[-1]
        self.stack.pop()
        if self.min == t:
            self.min = self.stack[-1]
            self.stack.pop()
        self.top = self.top - 1

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min
    
    def size(self):
        return self.top + 1
    
    def isEmpty(self):
        return self.size() == 0
    
    def isFull(self):
        return self.size() == self.capacity
    
      
m = MinStack(15)
m.push(-3)
m.push(5)
m.push(1)
print(m.getMin())
m.pop()
print(m.top())
m.push(10)
print(m.top())
m.push(-5)
print(m.getMin())