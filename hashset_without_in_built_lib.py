# -*- coding: utf-8 -*-
"""Hashset without in built lib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166akGF2YGwcXhLClFYRzuE3p0p3Tliqs
"""

class ListNode(object):
    def __init__(self, key, val):
        self.val = val
        self.key = key
        self.next = None
        self.prev = None

class LinkedList(object):
    def __init__(self):
        self.head = None
        self.tail = None

    def insert(self, node):
        node.next, node.prev = None, None  # avoid dirty node
        if self.head is None:
            self.head = node
        else:
            self.tail.next = node
            node.prev = self.tail
        self.tail = node

    def delete(self, node):
        if node.prev:
            node.prev.next = node.next
        else:
            self.head = node.next
        if node.next:
            node.next.prev = node.prev
        else:
            self.tail = node.prev
        node.next, node.prev = None, None  # make node clean

    def find(self, key):
        curr = self.head
        while curr:
            if curr.key == key:
                break
            curr = curr.next
        return curr


class MyHashSet:

    def __init__(self):
        self.__data = [LinkedList() for _ in range(10000)]
        

    def add(self, key: int) -> None:
        l = self.__data[key % len(self.__data)]
        node = l.find(key)
        if not node:
            l.insert(ListNode(key, 0))
        
        
    def remove(self, key: int) -> None:
        l = self.__data[key % len(self.__data)]
        node = l.find(key)
        if node:
            l.delete(node)
        

    def contains(self, key: int) -> bool:
        l = self.__data[key % len(self.__data)]
        node = l.find(key)
        return node is not None
        
        

# Your MyHashSet object will be instantiated and called as such:
obj = MyHashSet()
obj.add(1)
obj.add(2)
param_1 = obj.contains(1)
print("contains 1:", param_1)
param_2 = obj.contains(3)
print("contains 3:", param_2)
obj.add(2)
param_3 = obj.contains(2)
print("contains 2:", param_3)
obj.remove(2)
param_4 = obj.contains(2)
print("contains 2:", param_4)